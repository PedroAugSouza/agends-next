/**
 * Generated by orval v7.6.0 üç∫
 * Do not edit manually.
 * Example title
 * Description for api
 * OpenAPI spec version: 1.0
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

export interface InputCreateTag {
  name: string;
  color: string;
  userUuid: string;
}

export interface IError {
  reason: string;
  message: string;
}

export interface InputCreateHabit {
  name: string;
  color: string;
  userUuid: string;
  dayHabit: string[];
}

export interface InputUpdateHabit {
  uuid: string;
  /** @nullable */
  name: string | null;
  /** @nullable */
  color: string | null;
  /** @nullable */
  userUuid: string | null;
  /** @nullable */
  dayHabit: string[] | null;
}

export interface InputRegisterUser {
  name: string;
  email: string;
  password: string;
  dateBirth: string;
}

export interface InputAuthenticateUser {
  email: string;
  password: string;
}

export type AuthenticateUserControllerHandle201 = {
  access_token?: string;
};

export const createTagsControllerHandle = (
    inputCreateTag: InputCreateTag, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.post(
      `http://localhost:8000/tag`,
      inputCreateTag,options
    );
  }



export const getCreateTagsControllerHandleMutationOptions = <TError = AxiosError<IError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createTagsControllerHandle>>, TError,{data: InputCreateTag}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof createTagsControllerHandle>>, TError,{data: InputCreateTag}, TContext> => {
    
const mutationKey = ['createTagsControllerHandle'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createTagsControllerHandle>>, {data: InputCreateTag}> = (props) => {
          const {data} = props ?? {};

          return  createTagsControllerHandle(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateTagsControllerHandleMutationResult = NonNullable<Awaited<ReturnType<typeof createTagsControllerHandle>>>
    export type CreateTagsControllerHandleMutationBody = InputCreateTag
    export type CreateTagsControllerHandleMutationError = AxiosError<IError>

    export const useCreateTagsControllerHandle = <TError = AxiosError<IError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createTagsControllerHandle>>, TError,{data: InputCreateTag}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof createTagsControllerHandle>>,
        TError,
        {data: InputCreateTag},
        TContext
      > => {

      const mutationOptions = getCreateTagsControllerHandleMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const removeTagsControllerHandle = (
    uuid: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.delete(
      `http://localhost:8000/tag/${uuid}`,options
    );
  }



export const getRemoveTagsControllerHandleMutationOptions = <TError = AxiosError<IError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof removeTagsControllerHandle>>, TError,{uuid: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof removeTagsControllerHandle>>, TError,{uuid: string}, TContext> => {
    
const mutationKey = ['removeTagsControllerHandle'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof removeTagsControllerHandle>>, {uuid: string}> = (props) => {
          const {uuid} = props ?? {};

          return  removeTagsControllerHandle(uuid,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RemoveTagsControllerHandleMutationResult = NonNullable<Awaited<ReturnType<typeof removeTagsControllerHandle>>>
    
    export type RemoveTagsControllerHandleMutationError = AxiosError<IError>

    export const useRemoveTagsControllerHandle = <TError = AxiosError<IError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof removeTagsControllerHandle>>, TError,{uuid: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof removeTagsControllerHandle>>,
        TError,
        {uuid: string},
        TContext
      > => {

      const mutationOptions = getRemoveTagsControllerHandleMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const createHabitControllerHandle = (
    inputCreateHabit: InputCreateHabit, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.post(
      `http://localhost:8000/habit`,
      inputCreateHabit,options
    );
  }



export const getCreateHabitControllerHandleMutationOptions = <TError = AxiosError<IError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createHabitControllerHandle>>, TError,{data: InputCreateHabit}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof createHabitControllerHandle>>, TError,{data: InputCreateHabit}, TContext> => {
    
const mutationKey = ['createHabitControllerHandle'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createHabitControllerHandle>>, {data: InputCreateHabit}> = (props) => {
          const {data} = props ?? {};

          return  createHabitControllerHandle(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateHabitControllerHandleMutationResult = NonNullable<Awaited<ReturnType<typeof createHabitControllerHandle>>>
    export type CreateHabitControllerHandleMutationBody = InputCreateHabit
    export type CreateHabitControllerHandleMutationError = AxiosError<IError>

    export const useCreateHabitControllerHandle = <TError = AxiosError<IError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createHabitControllerHandle>>, TError,{data: InputCreateHabit}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof createHabitControllerHandle>>,
        TError,
        {data: InputCreateHabit},
        TContext
      > => {

      const mutationOptions = getCreateHabitControllerHandleMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const updateHabitControllerHandle = (
    inputUpdateHabit: InputUpdateHabit, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.patch(
      `http://localhost:8000/habit`,
      inputUpdateHabit,options
    );
  }



export const getUpdateHabitControllerHandleMutationOptions = <TError = AxiosError<IError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateHabitControllerHandle>>, TError,{data: InputUpdateHabit}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof updateHabitControllerHandle>>, TError,{data: InputUpdateHabit}, TContext> => {
    
const mutationKey = ['updateHabitControllerHandle'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateHabitControllerHandle>>, {data: InputUpdateHabit}> = (props) => {
          const {data} = props ?? {};

          return  updateHabitControllerHandle(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateHabitControllerHandleMutationResult = NonNullable<Awaited<ReturnType<typeof updateHabitControllerHandle>>>
    export type UpdateHabitControllerHandleMutationBody = InputUpdateHabit
    export type UpdateHabitControllerHandleMutationError = AxiosError<IError>

    export const useUpdateHabitControllerHandle = <TError = AxiosError<IError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateHabitControllerHandle>>, TError,{data: InputUpdateHabit}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof updateHabitControllerHandle>>,
        TError,
        {data: InputUpdateHabit},
        TContext
      > => {

      const mutationOptions = getUpdateHabitControllerHandleMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const removeHabitsControllerHandle = (
    uuid: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.delete(
      `http://localhost:8000/habit/${uuid}`,options
    );
  }



export const getRemoveHabitsControllerHandleMutationOptions = <TError = AxiosError<IError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof removeHabitsControllerHandle>>, TError,{uuid: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof removeHabitsControllerHandle>>, TError,{uuid: string}, TContext> => {
    
const mutationKey = ['removeHabitsControllerHandle'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof removeHabitsControllerHandle>>, {uuid: string}> = (props) => {
          const {uuid} = props ?? {};

          return  removeHabitsControllerHandle(uuid,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RemoveHabitsControllerHandleMutationResult = NonNullable<Awaited<ReturnType<typeof removeHabitsControllerHandle>>>
    
    export type RemoveHabitsControllerHandleMutationError = AxiosError<IError>

    export const useRemoveHabitsControllerHandle = <TError = AxiosError<IError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof removeHabitsControllerHandle>>, TError,{uuid: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof removeHabitsControllerHandle>>,
        TError,
        {uuid: string},
        TContext
      > => {

      const mutationOptions = getRemoveHabitsControllerHandleMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const registerUserControllerHandle = (
    inputRegisterUser: InputRegisterUser, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.post(
      `http://localhost:8000/register`,
      inputRegisterUser,options
    );
  }



export const getRegisterUserControllerHandleMutationOptions = <TError = AxiosError<IError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof registerUserControllerHandle>>, TError,{data: InputRegisterUser}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof registerUserControllerHandle>>, TError,{data: InputRegisterUser}, TContext> => {
    
const mutationKey = ['registerUserControllerHandle'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof registerUserControllerHandle>>, {data: InputRegisterUser}> = (props) => {
          const {data} = props ?? {};

          return  registerUserControllerHandle(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RegisterUserControllerHandleMutationResult = NonNullable<Awaited<ReturnType<typeof registerUserControllerHandle>>>
    export type RegisterUserControllerHandleMutationBody = InputRegisterUser
    export type RegisterUserControllerHandleMutationError = AxiosError<IError>

    export const useRegisterUserControllerHandle = <TError = AxiosError<IError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof registerUserControllerHandle>>, TError,{data: InputRegisterUser}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof registerUserControllerHandle>>,
        TError,
        {data: InputRegisterUser},
        TContext
      > => {

      const mutationOptions = getRegisterUserControllerHandleMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const authenticateUserControllerHandle = (
    inputAuthenticateUser: InputAuthenticateUser, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<AuthenticateUserControllerHandle201>> => {
    
    
    return axios.post(
      `http://localhost:8000/login`,
      inputAuthenticateUser,options
    );
  }



export const getAuthenticateUserControllerHandleMutationOptions = <TError = AxiosError<IError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authenticateUserControllerHandle>>, TError,{data: InputAuthenticateUser}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof authenticateUserControllerHandle>>, TError,{data: InputAuthenticateUser}, TContext> => {
    
const mutationKey = ['authenticateUserControllerHandle'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof authenticateUserControllerHandle>>, {data: InputAuthenticateUser}> = (props) => {
          const {data} = props ?? {};

          return  authenticateUserControllerHandle(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AuthenticateUserControllerHandleMutationResult = NonNullable<Awaited<ReturnType<typeof authenticateUserControllerHandle>>>
    export type AuthenticateUserControllerHandleMutationBody = InputAuthenticateUser
    export type AuthenticateUserControllerHandleMutationError = AxiosError<IError>

    export const useAuthenticateUserControllerHandle = <TError = AxiosError<IError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authenticateUserControllerHandle>>, TError,{data: InputAuthenticateUser}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof authenticateUserControllerHandle>>,
        TError,
        {data: InputAuthenticateUser},
        TContext
      > => {

      const mutationOptions = getAuthenticateUserControllerHandleMutationOptions(options);

      return useMutation(mutationOptions);
    }


export const getAuthenticateUserControllerHandleResponseMock = (overrideResponse: Partial< AuthenticateUserControllerHandle201 > = {}): AuthenticateUserControllerHandle201 => ({access_token: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})


export const getCreateTagsControllerHandleMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/tag', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 201,
        
      })
  })
}

export const getRemoveTagsControllerHandleMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/tag/:uuid', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getCreateHabitControllerHandleMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/habit', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 201,
        
      })
  })
}

export const getUpdateHabitControllerHandleMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.patch>[1]>[0]) => Promise<void> | void)) => {
  return http.patch('*/habit', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getRemoveHabitsControllerHandleMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/habit/:uuid', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getRegisterUserControllerHandleMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/register', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 201,
        
      })
  })
}

export const getAuthenticateUserControllerHandleMockHandler = (overrideResponse?: AuthenticateUserControllerHandle201 | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<AuthenticateUserControllerHandle201> | AuthenticateUserControllerHandle201)) => {
  return http.post('*/login', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAuthenticateUserControllerHandleResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getExampleTitleMock = () => [
  getCreateTagsControllerHandleMockHandler(),
  getRemoveTagsControllerHandleMockHandler(),
  getCreateHabitControllerHandleMockHandler(),
  getUpdateHabitControllerHandleMockHandler(),
  getRemoveHabitsControllerHandleMockHandler(),
  getRegisterUserControllerHandleMockHandler(),
  getAuthenticateUserControllerHandleMockHandler()
]
